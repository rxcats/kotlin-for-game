package io.github.rxcats.dynamodb.ops

import io.github.rxcats.aws.dynamodb.DynamoConfig
import io.github.rxcats.aws.dynamodb.ops.DynamoDbTableMeta
import io.github.rxcats.aws.dynamodb.ops.DynamoOperations
import io.github.rxcats.core.spring.ApplicationContextProviderInitializer
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.stereotype.Repository
import software.amazon.awssdk.enhanced.dynamodb.Key
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedTimestampAttribute
import software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior
import java.time.Instant

@SpringBootTest(classes = [ApplicationContextProviderInitializer::class, DynamoConfig::class, DynamoOperationsTest.UserRepository::class])
class DynamoOperationsTest {
    @DynamoDbTableMeta(tableName = "user")
    @DynamoDbBean
    data class User(
        @get:DynamoDbPartitionKey
        var pk: String = "",

        var userId: String = "",
        var nickname: String = "",

        @get:DynamoDbAutoGeneratedTimestampAttribute
        @get:DynamoDbUpdateBehavior(UpdateBehavior.WRITE_IF_NOT_EXISTS)
        var createdDate: Instant? = null,

        @get:DynamoDbAutoGeneratedTimestampAttribute
        @get:DynamoDbUpdateBehavior(UpdateBehavior.WRITE_ALWAYS)
        var updatedDate: Instant? = null
    ) {
        companion object {
            fun of(userId: String): User {
                return User(pk = userId, userId = userId)
            }
        }
    }

    @Repository
    class UserRepository : DynamoOperations<User>(User::class) {
        fun findById(userId: String): User? {
            val key = Key.builder()
                .partitionValue(userId)
                .build()
            return super.findByKey(key)
        }
    }

    @Autowired
    private lateinit var repository: UserRepository

    companion object {
        @JvmStatic
        @BeforeAll
        fun beforeAll(@Autowired repository: UserRepository) {
            repository.createTableIfNotExists()
        }

        @JvmStatic
        @AfterAll
        fun afterAll(@Autowired repository: UserRepository) {
            repository.deleteTable()
        }
    }

    @Test
    fun emptyUser() {
        val user = repository.findById("junitUser1")
        assertThat(user).isNull()
    }

    @Test
    fun saveAndFind() {
        repository.save(User.of("junitUser2"))

        val user = repository.findById("junitUser2")
        assertThat(user).isNotNull()
        assertThat(user?.createdDate).isNotNull()
        assertThat(user?.updatedDate).isNotNull()
    }

}
