package io.github.rxcats.aws.dynamodb

import io.github.rxcats.aws.auth.AwsCredentialsProviderConfig
import io.github.rxcats.aws.dynamodb.ops.DynamoTransactionOperations
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Import
import org.springframework.context.annotation.Profile
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient
import software.amazon.awssdk.enhanced.dynamodb.extensions.AtomicCounterExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient
import software.amazon.awssdk.services.dynamodb.DynamoDbClient
import java.net.URI

@Import(AwsCredentialsProviderConfig::class)
@EnableConfigurationProperties(DynamoProperties::class)
@Configuration(proxyBeanMethods = false)
class DynamoConfig {
    @Profile("local")
    @ConditionalOnMissingBean
    @Bean
    fun localDynamoDbClient(properties: DynamoProperties): DynamoDbClient {
        return DynamoDbClient.builder()
            .endpointOverride(URI.create(properties.url))
            .region(properties.region)
            .build()
    }

    @Profile("local")
    @ConditionalOnMissingBean
    @Bean
    fun localDynamoDbAsyncClient(properties: DynamoProperties): DynamoDbAsyncClient {
        return DynamoDbAsyncClient.builder()
            .endpointOverride(URI.create(properties.url))
            .region(properties.region)
            .build()
    }

    @Profile("!local")
    @ConditionalOnMissingBean
    @Bean
    fun dynamoDbClient(properties: DynamoProperties, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbClient {
        return DynamoDbClient.builder()
            .credentialsProvider(awsCredentialsProvider)
            .region(properties.region)
            .build()
    }

    @Profile("!local")
    @ConditionalOnMissingBean
    @Bean
    fun dynamoDbAsyncClient(properties: DynamoProperties, awsCredentialsProvider: AwsCredentialsProvider): DynamoDbAsyncClient {
        return DynamoDbAsyncClient.builder()
            .credentialsProvider(awsCredentialsProvider)
            .region(properties.region)
            .build()
    }

    @Bean
    fun dynamoDbEnhancedClient(dynamoDbClient: DynamoDbClient): DynamoDbEnhancedClient {
        return DynamoDbEnhancedClient.builder()
            .dynamoDbClient(dynamoDbClient)
            .extensions(
                AutoGeneratedTimestampRecordExtension.create(),
                AtomicCounterExtension.builder().build(),
                VersionedRecordExtension.builder().build()
            )
            .build()
    }

    @Bean
    fun dynamoDbEnhancedAsyncClient(dynamoDbAsyncClient: DynamoDbAsyncClient): DynamoDbEnhancedAsyncClient {
        return DynamoDbEnhancedAsyncClient.builder()
            .dynamoDbClient(dynamoDbAsyncClient)
            .extensions(
                AutoGeneratedTimestampRecordExtension.create(),
                AtomicCounterExtension.builder().build(),
                VersionedRecordExtension.builder().build()
            )
            .build()
    }

    @Bean
    fun dynamoTableOverrideConfig(properties: DynamoProperties): DynamoTableOverrideConfig {
        val prefix = if (properties.tableNamePrefix.isBlank()) "" else "${properties.tableNamePrefix}_"
        return DynamoTableOverrideConfig(prefix)
    }

    @Bean
    fun transactionOperations(dynamoDbEnhancedClient: DynamoDbEnhancedClient): DynamoTransactionOperations {
        return DynamoTransactionOperations(dynamoDbEnhancedClient)
    }

}
